----------
Deadlock
----------
- Deadlock occurs when two or more threads wait forever for a lock or resource held by
another of the threads.
- Deadlock is a situation in which two or more competing actions are each waiting for
the other to finish, and thus neither ever does.
- Deadlock in databases:
    Deadlock happens when two processes each withing its own transaction updates
    two rows of information but in the opposite order.
  For example: Process A updates row 1 then row 2, In the exact timeframe the process B
         updates row 2 then row 1. --> (Soln: Locks should always be acquired in the same order, to avoid cyclic dependency and hence a deadlock situation.)

-----------
Livelock
-----------
- A thread often acts in response to the action of another thread.
- If the other thread's action is also a response to the action of another thread
then livelock may rise.
- livelocked threads are unable to make further progress. However, the threads are not blocked:
  they are simply too busy responding to each other to resume work.
- Like two people attempting to pass each other in a narrow corridor: `A` moves to his left to let `B` pass,
while B moves to his right to let A pass (and so on). Even though, technically none of the two threads is blocked, but
they are not making any progress either.

------------------------------
Handling deadlock and livelock
------------------------------
1. We should make sure that a thread does not block infinitely if it is unable to acquire a lock.
    -> This is why using Lock interface's tryLock() method is extremely convenient and useful.
2. We should make sure that each thread acquires the locks in the same order to avoid any cyclic dependency
in lock acquisition.
3. Livelock can be handled with the methods above and some randomness.
    -> threads retry acquiring the locks at random intervals.

------------
Semaphores
------------
1. Invented by Dijsktra in 1962.
2. Semaphores are simple variables (or abstract data types) that are used for controlling access to a common resource.
3. It is an important concept in operating systems are well.
4. Semaphores are a record of how many units of a particular resource are available.
   We have to ait until a unit of the resource becomes available again.
5. Counting semaphores: Allows an arbitrary resource count.
   Binary semaphores: Semaphores that are restricted to the values 0 and 1.

--------------------------------
Mutex (Mutual exclusion objects)
--------------------------------
1. Mutual exclusion is a property of concurrency control which is instituted for the purpose
    of preventing race conditions.
2. Process synchronization plays an important role in maintaining the consistency of shared data (critical section problem)
3. Mutex is very similar to a binary semaphore: While binary semaphore can be used as mutex, a mutex is a
   more specific use-case.
4. A lock is designed to enforce a mutual exclusion concurrency control policy.

--------------------
Semaphores v/s Mutex
--------------------
Semaphores:
    1. It is a signaling mechanism.
    2. Threads and processes perform wait() and notify() operations to
       indicate whether they are acquiring or releasing the resource.
    3. Semaphores allows multiple program threads to access the finite
       instance of resources (not just a single resource).
    4. The process or thread blocks itself if not resource is free till
        the count of semaphore becomes greater than 0.
    5. No concept of ownership of a semaphore.


Mutex:
    1. Mutex is a locking mechanism.
    2. Threads or processes have to acquire the lock on mutex object if
       it wants to acquire the resource.
    3. Mutex allows multiple program threads to access a single shared resource
       but one at a time.
    4. If the lock is already acquired by another thread or process then the thread
       will wait until the mutex object gets unlocked.
    5. A mutex can be owned by at most one thread at any given time while on the
       other hand binary semaphore has no concept of ownership.
    6. If a task tries to unlock a mutex it hasn't locked (thus doesn't own) then
       an error condition is encountered and, most importantly, the mutex is not
       unlocked.